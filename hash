import sys
import os
import subprocess
import tempfile
import json
import hashlib
from base64 import b64encode
import asyncio
import fastapi
from pydantic import BaseModel
import uvicorn
import time

app = fastapi.FastAPI()

# Define the request model
class CalcRequest(BaseModel):
    gpu_count: int
    num_job_params: int
    jobs: list[dict]
    timeout: int


def gen_hash(s: bytes) -> bytes:
    return b64encode(hashlib.sha256(s).digest(), altchars=b"-_")

def run_hashcat(device_id: int, job: dict, num_job_params: int) -> list[str]:
    answers = []
    for i in range(num_job_params):
        payload = job["payloads"][i]
        mask = job["masks"][i]
        algorithm = job["algorithms"][i]

        with tempfile.NamedTemporaryFile(delete=True, suffix='.txt') as payload_file:
            payload_file.write(payload.encode('utf-8'))
            payload_file.flush()
            os.fsync(payload_file.fileno())

            if not os.path.exists(f"/usr/bin/hashcat{device_id}"):
                subprocess.check_output(f"cp /usr/bin/hashcat /usr/bin/hashcat{device_id}", shell=True)

            cmd = f'hashcat{device_id} --potfile-disable --restore-disable --attack-mode 3 -d {device_id} --workload-profile 3 --optimized-kernel-enable --hash-type {algorithm} --hex-salt -1 "?l?d?u" --outfile-format 2 --quiet {payload_file.name} "{mask}"'
            stdout = subprocess.check_output(cmd, shell=True, text=True)
            passwords = [p for p in sorted(stdout.split("\n")) if p != ""]
            answers.append(passwords)

    return answers

# POST /calc endpoint
@app.post("/calc")
async def run_jobs(request: CalcRequest):
    start_at = time.time()
    gpu_count = request.gpu_count
    num_job_params = request.num_job_params
    jobs = request.jobs
    timeout = request.timeout
    print(f"gpu_count: {gpu_count}, num_job_params: {num_job_params}, timeout: {timeout}", flush=True)
    tasks = [
        asyncio.to_thread(
            run_hashcat,
            i+1,
            jobs[i],
            num_job_params
        )
        for i in range(gpu_count)
    ]

    results = await asyncio.wait_for(asyncio.gather(*tasks, return_exceptions=True), timeout=timeout)
    result = {
        "answer": gen_hash("".join([
            "".join([
                "".join(passwords)
                for passwords in answers
            ])
            for answers in results
        ]).encode("utf-8")).decode("utf-8")
    }
    # print(result)
    print(json.dumps(result))
    print(f"Elapsed: {time.time() - start_at:.2f} sec")
    return result

if __name__ == "__main__":

    uvicorn.run(
        app,  # Replace 'server' with the name of your script (e.g., filename without .py)
        host="0.0.0.0",
        port=20000,
    )
